{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["TodoForm","addTodo","useState","id","task","completed","todo","setTodo","className","onSubmit","event","preventDefault","trim","uuid","TextField","label","name","type","value","onChange","target","Button","Todo","toggleComplete","removeTodo","ListItem","style","dislay","Checkbox","checked","onClick","Typography","variant","textDecoration","IconButton","TodoList","todos","List","map","LOCAL_STORAGE_KEY","App","setTodos","useEffect","storageTodos","JSON","parse","localStorage","getItem","setItem","stringify","padding","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+QA+CeA,MA1Cf,YAAiC,IAAZC,EAAW,EAAXA,QAAW,EACJC,mBAAS,CAC7BC,GAAI,GACJC,KAAM,GACNC,WAAW,IAJa,mBACrBC,EADqB,KACfC,EADe,KAuB5B,OACI,uBAAMC,UAAU,YAAYC,SAVX,SAACC,GAClBA,EAAMC,iBACFL,EAAKF,KAAKQ,SACVX,EAAQ,2BAAKK,GAAN,IAAYH,GAAIU,iBAEvBN,EAAQ,2BAAKD,GAAN,IAAYF,KAAM,QAK7B,UACI,cAACU,EAAA,EAAD,CACIC,MAAM,OACNC,KAAK,OACLC,KAAK,OACLC,MAAOZ,EAAKF,KACZe,SAvBc,SAACT,GACvBH,EAAQ,2BACDD,GADA,IAEHF,KAAMM,EAAMU,OAAOF,YAsBnB,cAACG,EAAA,EAAD,CAAQJ,KAAK,SAAb,wB,8DCFGK,MA9Bf,YAAqD,IAArChB,EAAoC,EAApCA,KAAMiB,EAA8B,EAA9BA,eAAgBC,EAAc,EAAdA,WASlC,OACI,eAACC,EAAA,EAAD,CAAUC,MAAO,CAACC,OAAQ,QAA1B,UACI,cAACC,EAAA,EAAD,CACIC,QAASvB,EAAKD,UACdyB,QAXgB,WACxBP,EAAejB,EAAKH,OAYhB,cAAC4B,EAAA,EAAD,CACIC,QAAQ,QACRN,MAAO,CACHO,eAAgB3B,EAAKD,UAAY,eAAiB,MAH1D,SAMKC,EAAKF,OAEV,cAAC8B,EAAA,EAAD,CAAYJ,QAjBM,WACtBN,EAAWlB,EAAKH,KAgBZ,SACI,cAAC,IAAD,UCTDgC,MAff,YAA0D,IAAtCC,EAAqC,EAArCA,MAAOb,EAA8B,EAA9BA,eAAgBC,EAAc,EAAdA,WACvC,OACI,cAACa,EAAA,EAAD,UACKD,EAAME,KAAI,SAAAhC,GAAI,OACX,cAAC,EAAD,CAEIA,KAAMA,EACNiB,eAAgBA,EAChBC,WAAYA,GAHPlB,EAAKH,UCHxBoC,EAAoB,wBAsDXC,MApDf,WAAiB,IAAD,EACYtC,mBAAS,IADrB,mBACPkC,EADO,KACAK,EADA,KAqCd,OAlCAC,qBAAU,WACR,IAAMC,EAAcC,KAAKC,MAAMC,aAAaC,QAAQR,IAChDI,GACFF,EAASE,KAGV,IAEHD,qBAAU,WACRI,aAAaE,QAAQT,EAAmBK,KAAKK,UAAUb,MACtD,CAACA,IAyBF,sBAAK5B,UAAU,MAAf,UACI,cAACuB,EAAA,EAAD,CAAYL,MAAO,CAAEwB,QAAS,IAAMlB,QAAQ,KAA5C,2BAGA,cAAC,EAAD,CAAU/B,QA3BA,SAACK,GACfmC,EAAS,CAACnC,GAAF,mBAAW8B,QA2Bf,cAAC,EAAD,CACEA,MAAOA,EACPb,eA1Be,SAACpB,GACtBsC,EACEL,EAAME,KAAI,SAAAhC,GACR,OAAGA,EAAKH,KAAOA,EACN,2BACFG,GADL,IAEED,WAAYC,EAAKD,YAGdC,OAkBLkB,WAbW,SAACrB,GAClBsC,EAASL,EAAMe,QAAO,SAAA7C,GAAI,OAAIA,EAAKH,KAAOA,aC/B/BiD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.96db80df.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport {v4 as uuid} from 'uuid';\nimport propTypes from 'prop-types';\nimport { Button, TextField } from '@material-ui/core';\n\nfunction TodoForm ({ addTodo }) {\n    const [todo, setTodo] = useState({\n        id: \"\",\n        task: \"\",\n        completed: false\n    });\n\n    const handleInputChange = (event) => {\n        setTodo({\n            ...todo,\n            task: event.target.value\n        })\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        if (todo.task.trim()) {\n            addTodo({ ...todo, id: uuid() });\n            // reset the task input field after a todo is submitted:\n            setTodo({ ...todo, task: \"\"});\n        }\n    }\n\n    return (\n        <form className='todo-from' onSubmit={handleSubmit}>\n            <TextField\n                label=\"Task\"\n                name=\"task\"\n                type=\"text\"\n                value={todo.task}\n                onChange={handleInputChange}\n            />\n            <Button type=\"submit\">submit</Button>\n        </form>\n    );\n\n}\n\nTodoForm.propTypes = {\n    addTodo: propTypes.func.isRequired \n};\n\nexport default TodoForm;","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { Checkbox, IconButton, ListItem, Typography } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\n\nfunction Todo({ todo, toggleComplete, removeTodo }) {\n\n    const handleCheckboxClick = () => {\n        toggleComplete(todo.id);\n    }\n\n    const handleRemoveClick = () => {\n        removeTodo(todo.id);\n    }\n    return(\n        <ListItem style={{dislay: 'flex'}}>\n            <Checkbox\n                checked={todo.completed}\n                onClick={handleCheckboxClick}\n                />\n            <Typography\n                variant=\"body1\"\n                style={{\n                    textDecoration: todo.completed ? 'line-through' : null\n                }}\n            >\n                {todo.task}\n            </Typography>\n            <IconButton onClick={handleRemoveClick}>\n                <CloseIcon />\n            </IconButton>\n        </ListItem>\n    )\n}\n\nexport default Todo;","/* eslint-disable react/prop-types */\nimport { List } from '@material-ui/core';\nimport React from 'react'\nimport Todo from './Todo'\n\nfunction TodoList({ todos, toggleComplete, removeTodo }) {\n    return(\n        <List>\n            {todos.map(todo =>(\n                <Todo \n                    key={todo.id}\n                    todo={todo}\n                    toggleComplete={toggleComplete}\n                    removeTodo={removeTodo}\n                />\n            ))}\n        </List>\n    );\n}\n\nexport default TodoList\n\n\n\n\n\n\n\n\n\n\n","/* eslint-disable react/prop-types */\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport TodoForm from './components/TodoForm';\nimport TodoList from './components/TodoList';\nimport Typography from '@material-ui/core/Typography';\n\nconst LOCAL_STORAGE_KEY = 'react-todo-list-todos';\n\nfunction App () {\n  const [todos, setTodos] = useState([]);\n\n  useEffect(() => {\n    const storageTodos= JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY))\n    if (storageTodos) {\n      setTodos(storageTodos);\n    }\n  \n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos));\n  }, [todos]);\n\n  const addTodo = (todo) => {\n    setTodos([todo, ...todos]);\n  };\n\n  const toggleComplete = (id) => {\n    setTodos(\n      todos.map(todo => {\n        if(todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed\n          };\n        }\n        return todo;\n      })\n    )\n  };\n\n  const removeTodo = (id) => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  };\n\n  return (\n    <div className=\"App\">\n        <Typography style={{ padding: 16 }} variant='h1'>\n        The Todo List\n        </Typography>\n        <TodoForm addTodo={addTodo} />\n        <TodoList \n          todos={todos}\n          toggleComplete={toggleComplete}\n          removeTodo={removeTodo}\n        />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}